/*Combine the calculated metrics into a single table*/
WITH account_data AS (
  SELECT
    s.date AS date,
    sp.country,
    a.send_interval,
    a.is_verified,
    a.is_unsubscribed,
    COUNT(a.id) AS account_cnt
  FROM `DA.account` AS a
  INNER JOIN `DA.account_session` AS acs
  ON a.id = acs.account_id
  INNER JOIN `DA.session` AS s
  ON acs.ga_session_id = s.ga_session_id
  INNER JOIN `DA.session_params` AS sp
  ON acs.ga_session_id = sp.ga_session_id
  GROUP BY s.date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),
email_data AS (
  SELECT
    DATE_ADD(s.date, INTERVAL ems.sent_date DAY) AS date,
    sp.country,
    a.send_interval,
    a.is_verified,
    a.is_unsubscribed,
    COUNT(DISTINCT ems.id_message) AS sent_msg,
    COUNT(DISTINCT eo.id_message) AS open_msg,
    COUNT(DISTINCT ev.id_message) AS visit_msg
  FROM `DA.email_sent` AS ems
  JOIN `DA.account_session` AS acs
  ON ems.id_account = acs.account_id
  JOIN `DA.session` AS s
  ON acs.ga_session_id = s.ga_session_id
  LEFT JOIN `DA.email_open` AS eo
  ON ems.id_message = eo.id_message
  LEFT JOIN `DA.email_visit` AS ev
  ON ems.id_message = ev.id_message
  INNER JOIN `DA.session_params` AS sp
  ON acs.ga_session_id = sp.ga_session_id
  INNER JOIN `DA.account` AS a
  ON ems.id_account = a.id
  GROUP BY date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),
/*Combine the calculated metrics into a single table*/
combined_data AS (
  SELECT
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    account_cnt,
    0 AS sent_msg,
    0 AS open_msg,
    0 AS visit_msg
  FROM account_data
  UNION ALL
  SELECT
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    0 AS account_cnt,
    sent_msg,
    open_msg,
    visit_msg
  FROM email_data
),
/*Aggregate calculated metrics*/
aggregated_data AS (
  SELECT
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    SUM(account_cnt) AS account_cnt,
    SUM(sent_msg) AS sent_msg,
    SUM(open_msg) AS open_msg,
    SUM(visit_msg) AS visit_msg,
    SUM(SUM(account_cnt)) OVER (PARTITION BY country) AS total_country_account_cnt,
    SUM(SUM(sent_msg)) OVER (PARTITION BY country) AS total_country_sent_cnt
  FROM combined_data
  GROUP BY date, country, send_interval, is_verified, is_unsubscribed
),
/*Create a rating based on selected metrics*/
ranked_data AS (
  SELECT *,
    DENSE_RANK() OVER (ORDER BY total_country_account_cnt DESC) AS rank_total_country_account_cnt,
    DENSE_RANK() OVER (ORDER BY total_country_sent_cnt DESC) AS rank_total_country_sent_cnt
  FROM aggregated_data
  )
SELECT *
FROM ranked_data
WHERE rank_total_country_account_cnt <= 10 OR rank_total_country_sent_cnt <= 10;
